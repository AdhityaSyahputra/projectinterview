version: '3.7'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - ecomm-network

  user-service:
    build: ./user-service
    ports:
      - "8081:8081"
    networks:
      - ecomm-network
    depends_on:
      - postgresql
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  product-service:
    build: ./product-service
    ports:
      - "8082:8082"
    networks:
      - ecomm-network
    depends_on:
      - elasticsearch
    environment:
      - SPRING_DATA_ELASTICSEARCH_CLIENT_NODES = elasticsearch:9200
      - SPRING_PROFILES_ACTIVE=dev
    links:
      - redis

  order-service:
    build: ./order-service
    ports:
      - "8083:8083"
    networks:
      - ecomm-network
    depends_on:
      - postgresql
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  notification-service:
    build: ./notification-service
    ports:
      - "8084:8084"
    networks:
      - ecomm-network
    depends_on:
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ecomm-network

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - ecomm-network

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - ecomm-network

  postgresql:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: adhityaproject
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    networks:
      - ecomm-network


networks:
  ecomm-network:
    driver: bridge